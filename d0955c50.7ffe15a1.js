(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return d}));var a=t(3),i=t(7),o=(t(0),t(88)),r={id:"ballot-encoding",title:"Ballot Encoding",sidebar_label:"Ballot Encoding",slug:"/file-formats/ballot-encoding"},s={unversionedId:"file-formats/ballot-encoding",id:"file-formats/ballot-encoding",isDocsHomePage:!1,title:"Ballot Encoding",description:"Introduction",source:"@site/docs/file-formats/ballot-encoding.md",slug:"/file-formats/ballot-encoding",permalink:"/admin-manual/docs/file-formats/ballot-encoding",editUrl:"https://github.com/agoravoting/admin-manual/edit/master/docs/file-formats/ballot-encoding.md",version:"current",sidebar_label:"Ballot Encoding",sidebar:"fileFormatsSidebar",previous:{title:"File Formats",permalink:"/admin-manual/docs/file-formats/introduction"},next:{title:"Election Creation JSON",permalink:"/admin-manual/docs/file-formats/election-creation-json"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"Basics",id:"basics",children:[]},{value:"Preferential systems",id:"preferential-systems",children:[]},{value:"Invalid Ballot Flag",id:"invalid-ballot-flag",children:[]},{value:"Cumulative voting system",id:"cumulative-voting-system",children:[]},{value:"Write-ins",id:"write-ins",children:[{value:"Write-in names",id:"write-in-names",children:[]}]}],c={toc:l};function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"Ballots information needs to be encoded into a big integer, because that's how\nencryption in Agora Voting works. At the same time, this number needs not to be\ntoo big specifically it needs to be smaller than the ",Object(o.b)("inlineCode",{parentName:"p"},"q")," value of the ElGamal\nencryption public key of the election. Otherwise the ballot would require\nmultiple ciphertexts and that would make things more complex and slow."),Object(o.b)("p",null,"Thus we have devised a specific procedure that is reasonably efficient to encode\nthe ballots. It is a two steps process:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"First a json ballot needs to be encoded into a list of numbers and a list of\nbases."),Object(o.b)("li",{parentName:"ol"},"We use ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Mixed_radix"}),"Mixed radix")," encoding to encode the list of numbers with their bases. ")),Object(o.b)("p",null,"So the first step we apply is to convert the ballot to a list of bases and a\nlist of numbers for each base, and then apply a mixed radix encoding to arrive\nto the final number to be encrypted with ElGamal. "),Object(o.b)("p",null,"As a minor detail, one should also note that the number 0 is not encryptable in\nElGamal so during encryption we always sum +1 before performing the encryption."),Object(o.b)("h2",{id:"basics"},"Basics"),Object(o.b)("p",null,"If in a ",Object(o.b)("inlineCode",{parentName:"p"},"plurality-at-large")," there are three candidates ",Object(o.b)("inlineCode",{parentName:"p"},"A"),", ",Object(o.b)("inlineCode",{parentName:"p"},"B"),",\nand ",Object(o.b)("inlineCode",{parentName:"p"},"C")," with answer ids ",Object(o.b)("inlineCode",{parentName:"p"},"0"),", ",Object(o.b)("inlineCode",{parentName:"p"},"1")," and ",Object(o.b)("inlineCode",{parentName:"p"},"2"),", and the voter wants to\nvote to candidates ",Object(o.b)("inlineCode",{parentName:"p"},"A")," and ",Object(o.b)("inlineCode",{parentName:"p"},"C"),", then his ballot choices (obtained\nusing encodeRawBallot) will be  ",Object(o.b)("inlineCode",{parentName:"p"},"v = [1, 0, 1]")," and the encoded\nchoices will be encoded this way:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"encodedChoices = v[0] + v[1]*b[0] + v[2]*b[0]*b[1]\nencodedChoices = v[0] + b[0]*(v[1] + b[1]*v[2])\nencodedChoices = 1 + 2*(0 + 2 * 1) = 1 + 4*1 = 5\n")),Object(o.b)("p",null,"And the bases are ",Object(o.b)("inlineCode",{parentName:"p"},"b = [2, 2, 2]"),". The reason the bases are 2 here\nis because plurality-at-large is a non-preferential voting system\nand each base is representing if the voter chose (then we use\n",Object(o.b)("inlineCode",{parentName:"p"},"v[x] = 1"),") or not (then we use ",Object(o.b)("inlineCode",{parentName:"p"},"v[x] = 0"),"), and the base is in\nthis case max(v","[x]",")+1`."),Object(o.b)("h2",{id:"preferential-systems"},"Preferential systems"),Object(o.b)("p",null,"In a preferential system, the voter can choose a specific ordering.\nIf we reuse the previous example, the voter might have chosen for\nthe first choice in his ballot candidate ",Object(o.b)("inlineCode",{parentName:"p"},"A"),", and for his second\nchoice candidate ",Object(o.b)("inlineCode",{parentName:"p"},"B"),". Not choosing a candidate would be encoded as\nvalue ",Object(o.b)("inlineCode",{parentName:"p"},"0"),", so choosing it as first position would be value ",Object(o.b)("inlineCode",{parentName:"p"},"1")," and\nso on. If the voter can choose up to 3 candidates, then the base\nwould be ",Object(o.b)("inlineCode",{parentName:"p"},"maxChoices+1 = 3+1 = 4"),", and thus bases will be\n",Object(o.b)("inlineCode",{parentName:"p"},"b = [4, 4, 4]")," and choices would be ",Object(o.b)("inlineCode",{parentName:"p"},"v = [1, 0, 2]")," and the\nencoded choices would be calculated as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"encodedChoices = v[0] + v[1]*b[1] + v[2]*b[1]*b[2]\nencodedChoices = v[0] + b[0]*(v[1] + b[1]*v[2])\nencodedChoices = 1 + 4*(0 + 4*2) = 1 + 16*2 = 33\n")),Object(o.b)("h2",{id:"invalid-ballot-flag"},"Invalid Ballot Flag"),Object(o.b)("p",null,"What was outlined before is the basics, but actually it does not\nwork exactly like that. The first value (",Object(o.b)("inlineCode",{parentName:"p"},"v[0]"),") in the raw ballot\ndoes not really represent the vote for the first candidate answer,\nbut it's always a flag saying if the ballot was marked as invalid\nor not by the voter. Note that this is not the only way to create\nan invalid ballot. For example the voter could vote to more options\nthan allowed, and that would also be an invalid ballot."),Object(o.b)("p",null,"We asumes the invalid ballot flag is represented in the question\nas a answer inside ",Object(o.b)("inlineCode",{parentName:"p"},"question.answers")," and it is flagged  by having\nan element in ",Object(o.b)("inlineCode",{parentName:"p"},"answer.urls")," as\n",Object(o.b)("inlineCode",{parentName:"p"},"{title: 'invalidVoteFlag', url: 'true'}"),"."),Object(o.b)("p",null,"Using the last example of a preferential vote, the bases would not\nbe ",Object(o.b)("inlineCode",{parentName:"p"},"b = [4, 4, 4]")," but ",Object(o.b)("inlineCode",{parentName:"p"},"b = [2, 4, 4, 4]")," (the first base encodes\nalways the invalid flag, whose max value is 1 so the base is always\n2)."),Object(o.b)("p",null,"The choices would not be ",Object(o.b)("inlineCode",{parentName:"p"},"v = [1, 0, 2]")," but (if the vote was\nnot marked as invalid) ",Object(o.b)("inlineCode",{parentName:"p"},"v = [0, 1, 0, 2]")," and thus the encoded\nchoices would be calculated as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"encodedChoices = v[0] + b[0]*(v[1] + b[1]*(v[2] + b[2]*v[3])\nencodedChoices = 0 + 2*(1 + 4*(0 + 4*2)) = 2*1 + 2*4*4*2\nencodedChoices = 2*1 + 32*2 = 66\n")),Object(o.b)("h2",{id:"cumulative-voting-system"},"Cumulative voting system"),Object(o.b)("p",null,"In a cumulative voting system, the voter would have a total number\nof integer points to assign to candidates, and the voter can assign\nthem to the available candidates with a maximum number of options\nthat can be assigned to each candidate."),Object(o.b)("p",null,"For example, the voter might be able to assign up to 2 points to\neach candidate and assign a total of 3 points. In practice, the\nencoding is done in a very similar format as with preferential\nvoting system. For each candidate, the value we assign is a number\nthat represents the points assigned to the candidate, and the base\nused is the maximum number of assignable points plus one."),Object(o.b)("p",null,"Retaking the previous example used for plurality-at-large and used\nfor a preferential voting system, if the voter can assign a\nmaximum of 4 points, and he wants to assign 2 points to candidate\n",Object(o.b)("inlineCode",{parentName:"p"},"A")," and 2 points to candidate ",Object(o.b)("inlineCode",{parentName:"p"},"C")," and he didn't mark his ballot\nas invalid, then his choices would be ",Object(o.b)("inlineCode",{parentName:"p"},"v = [0, 2, 0, 1]"),", the bases\nwould be ",Object(o.b)("inlineCode",{parentName:"p"},"b = [2, 5, 5, 5]")," and the encoded choices would be\ncalculated as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"encodedChoices = v[0] + b[0]*(v[1] + b[1]*(v[2] + b[2]*v[3])\nencodedChoices = 0 + 2*(2 + 5*(0 + 5*1)) = 2*2 + 2*5*5*1\nencodedChoices = 2*2 + 50*1 = 54\n")),Object(o.b)("h2",{id:"write-ins"},"Write-ins"),Object(o.b)("p",null,"This encoder supports write-ins. The idea of write-ins is that the\nvoter can choose candidates that are not in the preconfigured list\nof candidates. The maximum number of write-ins allowed is\ncalculated automatically by suppossing the voter tries to\ndistribute his vote entirely just for write-in candidates, which\nis usually ",Object(o.b)("inlineCode",{parentName:"p"},"question.max"),"."),Object(o.b)("p",null,"The vote for each write-in is encoded using the same procedure as\nfor normal candidates, in order and as if the write-ins were in\nthe list of candidates. It asumes all write-ins (even if not\nselected) are in the list of candidates and they are flagged as\nsuch simply by an element in ",Object(o.b)("inlineCode",{parentName:"p"},"answer.urls")," as\n",Object(o.b)("inlineCode",{parentName:"p"},"{title: 'isWriteIn', url: 'true'}"),"."),Object(o.b)("p",null,"For example in a plurality-at-large question example with three\ncandidates ",Object(o.b)("inlineCode",{parentName:"p"},"A"),", ",Object(o.b)("inlineCode",{parentName:"p"},"B")," and ",Object(o.b)("inlineCode",{parentName:"p"},"C")," where the voter can choose up to 2\ncandidates, if the voter wants to cast a valid ballot to his 2\nwrite-ins, then the bases, the choices and the encoded choices\nwould be:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"# bases\nb = [2, 2, 2, 2, 2, 2]\n# choices\nv = [0, 0, 0, 0, 1, 1]\nencodedChoices = 1*2^4 + 1*2^5 = 48\n")),Object(o.b)("h3",{id:"write-in-names"},"Write-in names"),Object(o.b)("p",null,"Of course that's not where a vote with write-ins ends. If the voter\nvoted to the write-ins, we would also have to encode the free text\nstring of the name of the write-ins. This is done by converting the\ntext from UTF-8 to numeric bytes, and encoding each byte using\n2^8 = 256 as a base. The separation between the different write-in\nnames is done using an empty byte (so ",Object(o.b)("inlineCode",{parentName:"p"},"v[x] = 0"),")."),Object(o.b)("p",null,"So if in our case the name of the voter's two write-ins is ",Object(o.b)("inlineCode",{parentName:"p"},"D")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"E"),", and knowing that character D is encoded as number ",Object(o.b)("inlineCode",{parentName:"p"},"68")," and E\nis ",Object(o.b)("inlineCode",{parentName:"p"},"69"),", then the bases, the choices and the encoded choices\nwould be:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"# bases\nb = [2, 2, 2, 2, 2, 2, 256, 256, 256, 256]\n# choices\nv = [0, 0, 0, 0, 1, 1, 68,  0,   69,  0]\nencodedChoices = 1*(2**4) + 1*(2**5) + 68*(2**6) + 69*(2**6)*(256**2) = 289411376\n")))}d.isMDXComponent=!0},88:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),d=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},b=function(e){var n=d(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},h=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=d(t),h=a,u=b["".concat(r,".").concat(h)]||b[h]||p[h]||o;return t?i.a.createElement(u,s(s({ref:n},c),{},{components:t})):i.a.createElement(u,s({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);